Photos   Now that my project is happily churning away at numbers, I have some time to post some updates.   First, there's pictures. These are from Thursday, when Prof. Brian Kernighan visited campus. These were taken by the computer science club sysadmin. The gallery is  urlLink here . I show up  urlLink here  (to the right, fat guy with black shirt and coat) and  urlLink here  (on the right again, way in the back at the table). I just have to say that Brian is an awesome guy. Words fail to describe his awesomness. He out-awesomes anyone I've met so far. He's the man. I pity the fool who misses a chance to meet him.   Project: Well, I got it to work. Sort of. Ok, ok, I cheated. I gave up on trying to get the color thing to work, and used the  stipple  method instead. I can select one color for all stipples (LightBlue1 make good color, but any color goes) and then I select different shades of stipples for each cell. Just like they used to do coloring in the 'ol days of monochrome monitors. Ain't that neat? I got a whole 15 shades to work with, plus white.  So, the idea is to build a list of all the files in every version of openssh. Then we create a comma-separated-value (csv) file that has the following:  An empty cell, followed by the list of  all  the files in available for any version of openssh. That we have, it's the list I talked about before.  A line for each version, with the version name, followed by either just a comma if the file is not in that version, or the number of dependencies if the file is in that version.  Do you get a picture now? Basically what I'm creating is a table with the filenames as columns, and the versions as rows. If the file is not present for a file/version combination, the corresponding cell is empty. If it is present, the cell has a number in it, which is the number of dependencies.  What good is this for you ask? Well, let me roll back a bit. The purpose of the project is to evaluate the evolution of openssh, and to point out any architectural instability. Now, the best way to do that by far is visualization. That's where the table comes in. First, it will let the users see how the files are distributed among versions. Second, it will allow me to colorize the cells to indicate file stability - if the dependencies of a file change from one version to another, then that file is unstable. The way to colorize that is to use the lightest shade to start. Every subsequent version that has the file turns the file a shade darker if the dependencies are unchanged, and a shade lighter if they changed. So the darker the cell, the more stable the file.