I've been toiling at this programming assignment for Algorithms all week. I don't think that the professor really expects us to do that much work on it. For all I know, we could have used simple arrays so that we could have focused on actually coming up with the right algorithms. But I'd already done that on the first day (coming up with the algorithm). It was, however,  fucking ugly  from a pragmatic programmer's point of view. See, the point is that the assignment expects our programs to run with character strings of millions of length. Two of them. And  then  the code they gave us as a hint for the algorithm makes a 2-dimensional array, with each of the string's length as the side length. So the first thing I did was put the two premises together mentally, and figure out that that's a  lot  of continuous space that gets allocated, most of which ends up not being used. So I did what any compulsive-obsessive geek would do, and started making my own data structures to work with this. And because I really like the way Ruby does things, I tried to emulate it in my data structures. Which ended up being a hell of a wok, but the results are very satisfying. Because now everything works, and the code is  elegant . Well, most of it. I cheated on one part, but only because I didn't want to deal with  friend  classes and whatnot. Which I could change I guess.   Well, now that I've implemented the first algorithm out of three I need to do the other two. And write the documentation. And some more tests.